#!/usr/bin/env python

"""
Post-analysis script to calculate the purity of cluster annotations.

This script takes the raw annotation CSV file generated by the per-cell
Scanpy/CellTypist pipeline and calculates a "purity score" for each
final consensus cluster label.

Purity is defined as the percentage of cells within a cluster that have a
per-cell annotation ('ctpt_label') matching the final consensus annotation
for that cluster ('cluster_ctpt').
"""

import pandas as pd
import os
import argparse

def main(args):
    """Main function to load data, calculate purity, and save results."""

    # --- 1. Load the data ---
    print(f"--- Cluster Purity Analysis ---")
    try:
        df = pd.read_csv(args.input_file)
        print(f"Successfully loaded {args.input_file}.")
        print(f"Found {len(df)} total cells.")
    except FileNotFoundError:
        print(f"Error: The file was not found at '{args.input_file}'")
        print("Please ensure the path is correct and the file exists.")
        exit()

    # --- 2. Create a consensus label for each cluster ---
    # The 'cluster_ctpt' column is often not in the raw per-cell output. We create it.
    # It's the most common 'ctpt_label' within each 'leiden' cluster.
    print("Assigning consensus label to each Leiden cluster...")
    df['cluster_ctpt'] = df.groupby('leiden')['ctpt_label'].transform(lambda x: x.value_counts().idxmax())

    # --- 3. Group by the newly created consensus cluster label ---
    grouped_by_cluster_label = df.groupby('cluster_ctpt')
    print("Analyzing purity for each consensus cluster label...")

    # --- 4. Iterate through each group to perform calculations ---
    analysis_results = []
    for cluster_name, group_df in grouped_by_cluster_label:
        total_in_group = len(group_df)
        
        # Count how many cells in this consensus group have a matching individual label
        matching_labels_count = (group_df['ctpt_label'] == cluster_name).sum()
        
        purity_percentage = (matching_labels_count / total_in_group) * 100 if total_in_group > 0 else 0
        
        analysis_results.append({
            "Consensus_Cluster_Label": cluster_name,
            "Total_Cells_in_Cluster": total_in_group,
            "Cells_with_Matching_Individual_Label": matching_labels_count,
            "Purity_Percentage": purity_percentage
        })

    # --- 5. Create a summary DataFrame and display the results ---
    summary_df = pd.DataFrame(analysis_results)
    summary_df = summary_df.sort_values(by="Total_Cells_in_Cluster", ascending=False)
    summary_df['Purity_Percentage'] = summary_df['Purity_Percentage'].map('{:.2f}%'.format)

    print("\n--- Annotation Purity Summary ---")
    print(summary_df.to_string(index=False))

    # --- 6. Save the summary to a new CSV file ---
    try:
        summary_df.to_csv(args.output_file, index=False)
        print(f"\nAnalysis complete. Summary saved to '{args.output_file}'")
    except Exception as e:
        print(f"\nError saving file: {e}")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Calculate cluster annotation purity from CellTypist per-cell output.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    
    parser.add_argument('--input_file', type=str, required=True,
                        help="Path to the input CSV file containing per-cell annotations (e.g., *_annotations_per_cell_raw.csv).")
    
    parser.add_argument('--output_file', type=str, required=True,
                        help="Path for the output CSV file where the purity summary will be saved.")

    args = parser.parse_args()
    main(args)
